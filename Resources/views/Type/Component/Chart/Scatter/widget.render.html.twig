{% extends 'TechPromuxDynamicReportBundle:Component:Chart/component.render.base.chart.html.twig' %}
{% set chart_type = 'Scatter' %}
{% set chart_legend_type = 'scatter-legend' %}

{% block component_javascripts_render_chart_legend %}
    <script>
        // function for rendering custom chart

        function tpx_component_chart_{{chart_type}}_render_custom_chartjs_legend_{{component.id | replace({'-':'_'}) }}(update_legend = false) {

        console.log('TPX-Component-Chart-{{chart_type}}: creating chart legend');
                // creating chart legend
                if (update_legend == false)
                return;
                console.log('TPX-Component-Chart-{{chart_type}}: obtaining chart legend');
                var legend_{{component.id | replace({'-':'_'}) }} = '<ul class="{{chart_legend_type}} list-unstyled nav navbar-top-links">';
                // crear aqui la legenda
                for (var x = 0; x < window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}.length; x++)
        {
        legend_{{component.id | replace({'-':'_'}) }} += '<li style="margin:5px; opacity: 1; cursor: pointer;">';
                legend_{{component.id | replace({'-':'_'}) }} += '<span class="{{chart_legend_type}}-icon" style="padding:0px 5px 0px 10px;background-color:' + window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}[x].strokeColor + '"></span>';
                legend_{{component.id | replace({'-':'_'}) }} += '<span class="{{chart_legend_type}}-text" style="padding-left:7px;">' + window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}[x].label + '</span>';
        }
        legend_{{component.id | replace({'-':'_'}) }} += '</ul>';
                console.log('TPX-Component-Chart-{{chart_type}}: showing chart legend');
                $('#component-chart-{{chart_type}}-legend-top-{{component.id}}').html('');
                $('#component-chart-{{chart_type}}-legend-top-{{component.id}}').append(legend_{{component.id | replace({'-':'_'}) }});
                $('#component-chart-{{chart_type}}-legend-bottom-{{component.id}} ul').html('');
                /**/$('#component-chart-{{chart_type}}-legend-top-{{component.id}} ul.{{chart_legend_type}} li').each(function (id, el) {
        $(this).attr('data-legend-offset', id);
                $(this).attr('data-legend-show', "true");
                $(this).attr('data-legend-prefix', "{{settings['detail_for_data']['show_prefix'] ? settings['_details_descriptions'][settings['detail_for_data']['detail_id']]['prefix'] : ''}}");
                $(this).attr('data-legend-suffix', "{{settings['detail_for_data']['show_suffix'] ? settings['_details_descriptions'][settings['detail_for_data']['detail_id']]['suffix'] : ''}}");
        });
                console.log('TPX-Component-Chart-{{chart_type}}: ending rendering legend');
        }
    </script>
{% endblock component_javascripts_render_chart_legend %}

{% block component_javascripts_configure_legend %}
    <script>
        // configure legend options from chart
        $(document).on('click', '#tpx-component-chart-{{chart_type}}-legend-top-{{component.id}} ul.{{chart_legend_type}} li', function () {
        console.log('TPX-Component-Chart-{{chart_type}}: click on chart legend to hide or show it');
                var show = $(this).attr('data-legend-show');
                if (show == "true")
                $(this).css({
        opacity: 0.3,
                cursor: 'not-allowed'
        });
                else
                $(this).css({
        opacity: 1,
                cursor: 'pointer'
        });
                $(this).attr('data-legend-show', show == "true" ? "false" : "true");
                var default_datasets = window.tpx_component_chart_{{chart_type}}_data_default_{{component.id | replace({'-':'_'}) }};
                var new_datasets = [];
                var new_labels = [];
                var pos = 0;
                var legends = $('#component-chart-{{chart_type}}-legend-top-{{component.id}} ul.{{chart_legend_type}} li');
                for (var i = 0; i < legends.length; i++)
        {
        if ($(legends[i]).attr('data-legend-show') == "true")
        {
        new_datasets[pos] = {
        label: default_datasets[i].label,
                value: default_datasets[i].value,
                strokeColor: default_datasets[i].strokeColor,
                data:  default_datasets[i].data
        };
                pos++;
        }
        }
        window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }} = new_datasets;
                tpx_component_chart_{{chart_type}}_render_custom_chartjs_{{component.id | replace({'-':'_'}) }}(false);
        }); /**/

    </script>
{% endblock component_javascripts_configure_legend %}


{% block component_javascripts_render_chart_data %}

    {{parent()}}
    <script>

                // initial options and executing rendering chart

                $(document).ready(function () {

        window.tpx_component_chart_{{chart_type}}_data_default_{{component.id | replace({'-':'_'}) }} = {{chart_data | raw}};
                window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }} = {{chart_data|raw}};
                window.tpx_component_chart_{{chart_type}}_custom_chartjs_options_{{component.id | replace({'-':'_'}) }} =
        {
        // Boolean - Whether to animate the chart
        animation: true,
                // Number - Number of animation steps
                animationSteps: 60,
                // String - Animation easing effect
                // Possible effects are:
                // [easeInOutQuart, linear, easeOutBounce, easeInBack, easeInOutQuad,
                //  easeOutQuart, easeOutQuad, easeInOutBounce, easeOutSine, easeInOutCubic,
                //  easeInExpo, easeInOutBack, easeInCirc, easeInOutElastic, easeOutBack,
                //  easeInQuad, easeInOutExpo, easeInQuart, easeOutQuint, easeInOutCirc,
                //  easeInSine, easeOutExpo, easeOutCirc, easeOutCubic, easeInQuint,
                //  easeInElastic, easeInOutSine, easeInOutQuint, easeInBounce,
                //  easeOutElastic, easeInCubic]
                animationEasing: "easeOutQuart",
                // Boolean - If we should show the scale at all
                showScale: true,
                // Boolean - If we want to override with a hard coded scale
                scaleOverride: false,
                // ** Required if scaleOverride is true **
                // Number - The number of steps in a hard coded scale
                scaleSteps: null,
                // Number - The value jump in the hard coded scale
                scaleStepWidth: null,
                // Number - The scale starting value
                scaleStartValue: null,
                // String - Colour of the scale line
                scaleLineColor: "rgba(0,0,0,.1)",
                // Number - Pixel width of the scale line
                scaleLineWidth: 1,
                // Boolean - Whether to show labels on the scale
                scaleShowLabels: true,
                // Boolean - Whether the scale should stick to integers, not floats even if drawing space is there
                scaleIntegersOnly: true,
                // String - Scale label font declaration for the scale label
                scaleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                // Number - Scale label font size in pixels
                scaleFontSize: 12,
                // String - Scale label font weight style
                scaleFontStyle: "normal",
                // String - Scale label font colour
                scaleFontColor: "#666",
                // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
                maintainAspectRatio: true,
                // Boolean - Determines whether to draw tooltips on the canvas or not
                showTooltips: true,
                // Array - Array of string names to attach tooltip events
                tooltipEvents: ["mousemove", "touchstart", "touchmove"],
                // String - Tooltip background colour
                tooltipFillColor: "rgba(0,0,0,0.8)",
                // String - Tooltip label font declaration for the scale label
                tooltipFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                // Number - Tooltip label font size in pixels
                tooltipFontSize: 14,
                // String - Tooltip font weight style
                tooltipFontStyle: "normal",
                // String - Tooltip label font colour
                tooltipFontColor: "#fff",
                // String - Tooltip title font declaration for the scale label
                tooltipTitleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                // Number - Tooltip title font size in pixels
                tooltipTitleFontSize: 14,
                // String - Tooltip title font weight style
                tooltipTitleFontStyle: "bold",
                // String - Tooltip title font colour
                tooltipTitleFontColor: "#fff",
                // String - Tooltip title template
                //tooltipTitleTemplate: "<%= label%>",
                // Number - pixel width of padding around tooltip text
                tooltipYPadding: 6,
                // Number - pixel width of padding around tooltip text
                tooltipXPadding: 6,
                // Number - Size of the caret on the tooltip
                tooltipCaretSize: 8,
                // Number - Pixel radius of the tooltip border
                tooltipCornerRadius: 6,
                // Number - Pixel offset from point x to tooltip edge
                tooltipXOffset: 10,
                // FieldFunction - Will fire on animation progression.
                onAnimationProgress: function () {
                },
                // FieldFunction - Will fire on animation completion.
                onAnimationComplete: function () {
                },
                // Boolean - whether or not the chart should be responsive and resize when the browser does.
                responsive: {% if (settings['chart_options']['width'] is defined and settings['chart_options']['width']!='')%}false{%else%}true{%endif%},
                // FieldFunction - Determines whether to execute the customTooltips function instead of drawing the built in tooltips (See [Advanced - External Tooltips](#advanced-usage-external-tooltips))
                customTooltips: function (tooltip)
                {
                var tooltipEl = $('#component-chart-{{chart_type}}-tooltip-{{component.id}}');
                        if (!tooltip)
                {
                tooltipEl.css({opacity: 0});
                        return;
                }
                tooltipEl.css({
                padding: '5px'
                });
                        tooltipEl.removeClass('above below');
                        tooltipEl.addClass(tooltip.yAlign);
                        var innerHtml = '';
                        if ($('#component-chart-{{chart_type}}-legend-top-{{component.id}} ul li[data-legend-show="true"]').length == 0)
                        return;
                        if (tooltip.labels != null && tooltip.labels != undefined)
                {
                for (var i = 0; i < tooltip.labels.length; i++)
                {
                var prefix = '';
                        var suffix = '';
                        var label = tooltip.labels[i].substring(0, tooltip.labels[i].lastIndexOf(': ')) + ': ';
                        var value = tooltip.labels[i].substring(tooltip.labels[i].lastIndexOf(':') + 2, tooltip.labels[i].length + 1);
                        var tooltip_formatted = label + prefix + value + suffix;
                        innerHtml += [
                                '<div class="chartjs-tooltip-section">',
                                '	<span class="chartjs-tooltip-key" style="background-color:' + tooltip.legendColors[i].fill + '"></span>',
                                '	<span class="chartjs-tooltip-value">' + tooltip_formatted + '</span>',
                                '</div>'
                        ].join('');
                }
                }
                else
                {
                var prefix = '';
                        var suffix = '';
                        var label = tooltip.text.substring(0, tooltip.text.lastIndexOf(': ')) + ': ' + prefix + tooltip.text.substring(tooltip.text.lastIndexOf(':') + 2, tooltip.text.length + 1) + suffix;
                        innerHtml += [
                                '<div class="chartjs-tooltip-section">',
                                '	<span class="chartjs-tooltip-value">' + label + '</span>',
                                '</div>'
                        ].join('');
                }
                tooltipEl.html(innerHtml);
                        tooltipEl.css({
                        opacity: 1,
                                left: tooltip.chart.canvas.offsetLeft + tooltip.x + 'px',
                                top: tooltip.chart.canvas.offsetTop + tooltip.y + 'px',
                                fontFamily: tooltip.fontFamily,
                                fontSize: tooltip.fontSize,
                                fontStyle: tooltip.fontStyle,
                        });
                },
                //  ----- Scatter Chart Options ----------------
                // String - Message for empty data
                emptyDataMessage: "",
                // Boolean - Whether grid lines are shown across the chart
                scaleShowGridLines: true,
                // Number - Width of the grid lines
                scaleGridLineWidth: 1,
                // String - Colour of the grid lines
                scaleGridLineColor: "rgba(0,0,0,.05)",
                // Boolean - Whether to show horizontal lines (except X axis)	
                scaleShowHorizontalLines: true,
                // Boolean - Whether to show vertical lines (except Y axis)
                scaleShowVerticalLines: true,
                // HORIZONTAL SCALE RANGE

                // Boolean - If we want to override with a hard coded x scale
                xScaleOverride: false,
                // ** Required if scaleOverride is true **
                // Number - The number of steps in a hard coded x scale
                xScaleSteps: null,
                // Number - The value jump in the hard coded x scale
                xScaleStepWidth: null,
                // Number - The x scale starting value
                xScaleStartValue: null,
                // DATE SCALE
                // String - scale type: "number" or "date"
                //scaleType: "number",
                // Boolean - Whether to use UTC dates instead local
                useUtc: false,
                // String - short date format (used for scale labels)
                scaleDateFormat: "mmm d",
                // String - short time format (used for scale labels)
                scaleTimeFormat: "h:MM",
                // String - full date format (used for point labels)
                scaleDateTimeFormat: "mmm d, yyyy, hh:MM",
                // LINES

                // Boolean - Whether to show a stroke for datasets
                datasetStroke: {% if (settings['chart_options']['chart_type'] is defined and settings['chart_options']['chart_type']=='ScatterStroke')%}true{%else%}false{%endif%},
                // Number - Pixel width of dataset stroke
                datasetStrokeWidth: 2,
                // String - Color of dataset stroke
                //datasetStrokeColor: '#007ACC',
                // String - Color of dataset stroke
                //datasetPointStrokeColor: 'white',
                // Boolean - Whether the line is curved between points
                //bezierCurve: true,
                // Number - Tension of the bezier curve between points
                //bezierCurveTension: 0.4,
                // POINTS

                // Boolean - Whether to show a dot for each point
                //pointDot: true,
                // Number - Pixel width of point dot stroke
                //pointDotStrokeWidth: 1,
                // Number - Radius of each point dot in pixels
                //pointDotRadius: 4,
                // Number - amount extra to add to the radius to cater for hit detection outside the drawn point
                pointHitDetectionRadius: 4,
                // TEMPLATES
                // Interpolated JS string - can access value
                scaleLabel: "{{settings['detail_for_data']['show_prefix'] ? settings['_details_descriptions'][settings['detail_for_data']['detail_id']]['prefix'] : ''}}<%=value%>{{settings['detail_for_data']['show_suffix'] ? settings['_details_descriptions'][settings['detail_for_data']['detail_id']]['suffix'] : ''}}",
                // Interpolated JS string - can access value
                scaleArgLabel: "{{settings['detail_for_label']['show_prefix'] ? settings['_details_descriptions'][settings['detail_for_label']['detail_id']]['prefix'] : ''}}<%=value%>{{settings['detail_for_label']['show_suffix'] ? settings['_details_descriptions'][settings['detail_for_label']['detail_id']]['suffix'] : ''}}",
                // Interpolated JS string - can access point fields: 
                // argLabel, valueLabel, arg, value, datasetLabel, size
                tooltipTemplate: {% raw %}"<%if (datasetLabel){%><%=datasetLabel%>: <%}%><%=argLabel%>; <%=valueLabel%>{%endraw%}{% if (settings['chart_options']['chart_type'] == 'ScatterBubble')%} ({{settings['detail_for_radius']['show_prefix'] ? settings['_details_descriptions'][settings['detail_for_radius']['detail_id']]['prefix'] : ''}}<%=size*window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}_reduceR%>{{settings['detail_for_radius']['show_suffix'] ? settings['_details_descriptions'][settings['detail_for_radius']['detail_id']]['suffix'] : ''}}){%endif%}{%raw%}",{% endraw %}
                // Interpolated JS string - can access point fields: 
                // argLabel, valueLabel, arg, value, datasetLabel, size
                multiTooltipTemplate: {% raw %}"<%if (datasetLabel){%><%=datasetLabel%>: <%}%><%=argLabel%>; <%=valueLabel%>{%endraw%}{% if (settings['chart_options']['chart_type'] == 'ScatterBubble')%} ({{settings['detail_for_radius']['show_prefix'] ? settings['_details_descriptions'][settings['detail_for_radius']['detail_id']]['prefix'] : ''}}<%=size*window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}_reduceR%>{{settings['detail_for_radius']['show_suffix'] ? settings['_details_descriptions'][settings['detail_for_radius']['detail_id']]['suffix'] : ''}}){%endif%}{%raw%}",{% endraw %}
                // Interpolated JS string - can access all chart fields
                legendTemplate: {% raw %}"<ul class=\"<%=name.toLowerCase()%>-legend list-unstyled nav navbar-top-links\"><% for (var i=0; i<datasets.length; i++){%><li style=\"margin:5px;cursor:pointer;opacity:1;\"><span style=\"background-color:<%=datasets[i].strokeColor%>;padding:0px 5px 0px 10px\"></span><span style=\"padding-left:7px;\"><strong><%if(datasets[i].label){%><%=datasets[i].label%><%}%></strong></span></li><%}%></ul>",{% endraw %}
        };
                $('#component-panel-content-{{component.id}}').trigger('data-loaded');
        });</script>
    {% endblock component_javascripts_render_chart_data %}

{% block component_javascripts_load_data_from_ajax %}
    <script>
                // loading data from ajax
                $('#component-panel-content-{{component.id}}').on('data-loaded', function (event) {
        if ($('#component-panel-content-{{component.id}}').attr('data-loaded') != null && $('#component-panel-content-{{component.id}}').attr('data-loaded') != '')
        {
        var data_loaded = $('#component-panel-content-{{component.id}}').attr('data-loaded');
                $('#component-panel-content-{{component.id}}').attr('data-loaded', '');
                window.tpx_component_chart_{{chart_type}}_data_default_{{component.id | replace({'-':'_'}) }} = JSON.parse(data_loaded);
                window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }} = JSON.parse(data_loaded);
        }
        //--------------------------------------------------------
        window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}_reduceR = 1;
                if ('{{settings['chart_options']['chart_type']}}' == 'ScatterBubble')
        {
        window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}_maxR = 0;
                for (var i = 0; i < window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}.length; i++)
        {
        var serie = window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}[i];
                for (var j = 0; j < window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}[i].data.length; j++)
        {
        if (window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}_maxR < window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}[i].data[j].r)
                window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}_maxR = window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}[i].data[j].r;
        }
        }

        window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}_reduceR = window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}_maxR > 15? window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}_maxR / 15: 1;
                for (var i = 0; i < window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}.length; i++)
        {
        for (var j = 0; j < window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}[i].data.length; j++)
        {
        window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}[i].data[j].r /= window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}_reduceR;
                window.tpx_component_chart_{{chart_type}}_data_default_{{component.id | replace({'-':'_'}) }}[i].data[j].r /= window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}_reduceR;
        }
        }
        }
        //------------------------------------------

        tpx_component_chart_{{chart_type}}_render_custom_chartjs_{{component.id | replace({'-':'_'}) }}(true);
        }); /**/
    </script>
{% endblock component_javascripts_load_data_from_ajax %}
