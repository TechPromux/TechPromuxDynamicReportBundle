{% extends 'TechPromuxDynamicReportBundle:Component:Chart/component.render.base.chart.html.twig' %}
{% set chart_type = settings['chart_options']['chart_type'] %}
{% set chart_legend_type = (chart_type| lower)~'-legend' %}

{% block component_javascripts_render_chart_data %}

    {{parent()}}
    <script>

        // initial options and executing rendering chart

        $(document).ready(function () {

            window.tpx_component_chart_{{chart_type}}_data_default_{{component.id | replace({'-':'_'}) }} = {{chart_data | raw}};
                    window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }} = {{chart_data|raw}};
                    window.tpx_component_chart_{{chart_type}}_custom_chartjs_options_{{component.id | replace({'-':'_'}) }} =
                    {
                        // Boolean - Whether to animate the chart
                        animation: true,
                        // Number - Number of animation steps
                        animationSteps: 60,
                        // String - Animation easing effect
                        // Possible effects are:
                        // [easeInOutQuart, linear, easeOutBounce, easeInBack, easeInOutQuad,
                        //  easeOutQuart, easeOutQuad, easeInOutBounce, easeOutSine, easeInOutCubic,
                        //  easeInExpo, easeInOutBack, easeInCirc, easeInOutElastic, easeOutBack,
                        //  easeInQuad, easeInOutExpo, easeInQuart, easeOutQuint, easeInOutCirc,
                        //  easeInSine, easeOutExpo, easeOutCirc, easeOutCubic, easeInQuint,
                        //  easeInElastic, easeInOutSine, easeInOutQuint, easeInBounce,
                        //  easeOutElastic, easeInCubic]
                        animationEasing: "easeOutQuart",
                        // Boolean - If we should show the scale at all
                        showScale: true,
                        // Boolean - If we want to override with a hard coded scale
                        scaleOverride: false,
                        // ** Required if scaleOverride is true **
                        // Number - The number of steps in a hard coded scale
                        scaleSteps: null,
                        // Number - The value jump in the hard coded scale
                        scaleStepWidth: null,
                        // Number - The scale starting value
                        scaleStartValue: null,
                        // String - Colour of the scale line
                        scaleLineColor: "rgba(0,0,0,.1)",
                        // Number - Pixel width of the scale line
                        scaleLineWidth: 1,
                        // Boolean - Whether to show labels on the scale
                        scaleShowLabels: true,
                        // Interpolated JS string - can access value
                        scaleLabel: "<%=value%>",
                        // Boolean - Whether the scale should stick to integers, not floats even if drawing space is there
                        scaleIntegersOnly: true,
                        // String - Scale label font declaration for the scale label
                        scaleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                        // Number - Scale label font size in pixels
                        scaleFontSize: 12,
                        // String - Scale label font weight style
                        scaleFontStyle: "normal",
                        // String - Scale label font colour
                        scaleFontColor: "#666",
                        // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
                        maintainAspectRatio: true,
                        // Boolean - Determines whether to draw tooltips on the canvas or not
                        showTooltips: true,
                        // Array - Array of string names to attach tooltip events
                        tooltipEvents: ["mousemove", "touchstart", "touchmove"],
                        // String - Tooltip background colour
                        tooltipFillColor: "rgba(0,0,0,0.8)",
                        // String - Tooltip label font declaration for the scale label
                        tooltipFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                        // Number - Tooltip label font size in pixels
                        tooltipFontSize: 14,
                        // String - Tooltip font weight style
                        tooltipFontStyle: "normal",
                        // String - Tooltip label font colour
                        tooltipFontColor: "#fff",
                        // String - Tooltip title font declaration for the scale label
                        tooltipTitleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                        // Number - Tooltip title font size in pixels
                        tooltipTitleFontSize: 14,
                        // String - Tooltip title font weight style
                        tooltipTitleFontStyle: "bold",
                        // String - Tooltip title font colour
                        tooltipTitleFontColor: "#fff",
                        // String - Tooltip title template
                        //tooltipTitleTemplate: "<%= label%>",
                        // Number - pixel width of padding around tooltip text
                        tooltipYPadding: 6,
                        // Number - pixel width of padding around tooltip text
                        tooltipXPadding: 6,
                        // Number - Size of the caret on the tooltip
                        tooltipCaretSize: 8,
                        // Number - Pixel radius of the tooltip border
                        tooltipCornerRadius: 6,
                        // Number - Pixel offset from point x to tooltip edge
                        tooltipXOffset: 10,
                        // String - Template string for single tooltips
                        tooltipTemplate: {% raw %}"<%if (label){%><%=label%>: <%}%><%= value %>",{% endraw %}
                        // String - Template string for multiple tooltips
                        //multiTooltipTemplate: "<%= value %>",
                        // FieldFunction - Will fire on animation progression.
                        onAnimationProgress: function () {
                        },
                        // FieldFunction - Will fire on animation completion.
                        onAnimationComplete: function () {
                        },
                        // Boolean - whether or not the chart should be responsive and resize when the browser does.
                        responsive: {% if (settings['chart_options']['width'] is defined and settings['chart_options']['width']!='')%}false{%else%}true{%endif%},
                        // FieldFunction - Determines whether to execute the customTooltips function instead of drawing the built in tooltips (See [Advanced - External Tooltips](#advanced-usage-external-tooltips))
                        customTooltips: function (tooltip)
                        {
                            var tooltipEl = $('#component-chart-{{chart_type}}-tooltip-{{component.id}}');
                            if (!tooltip)
                            {
                                tooltipEl.css({opacity: 0});
                                return;
                            }
                            tooltipEl.css({
                                padding: '5px'
                            });
                            tooltipEl.removeClass('above below');
                            tooltipEl.addClass(tooltip.yAlign);
                            var innerHtml = '';
                            if ($('#component-chart-{{chart_type}}-legend-top-{{component.id}} ul li[data-legend-show="true"]').length == 0)
                                return;
                            if (tooltip.labels != null && tooltip.labels != undefined)
                            {
                                innerHtml += [
                                    '<div class="chartjs-tooltip-section">',
                                    '	<span class="chartjs-tooltip-value">' + tooltip.title + '</span>',
                                    '	<hr style="margin-top:5px;margin-bottom:5px;"></hr>',
                                    '</div>'
                                ].join('');
                                var show_percentage = {% if (settings['chart_options']['chart_type'] == "StackedBar" and settings['chart_options']['stacked_chart_bar_presentation'] == "relative_bar")%}true{%else%}false{%endif%};
                                var total = 0;
                                if (show_percentage)
                                {
                                    for (var i = 0; i < $('#component-chart-{{chart_type}}-legend-top-{{component.id}} ul li[data-legend-show="true"]').length /*tooltip.labels.length*/; i++)
                                    {
                                        total += parseFloat(tooltip.labels[i].substring(tooltip.labels[i].lastIndexOf(':') + 2, tooltip.labels[i].length + 1));
                                    }
                                }
                                for (var i = 0; i < $('#component-chart-{{chart_type}}-legend-top-{{component.id}} ul li[data-legend-show="true"]').length /*tooltip.labels.length*/; i++)
                                {
                                    var legend = $($('#component-chart-{{chart_type}}-legend-top-{{component.id}} ul.{{chart_legend_type}} li[data-legend-show="true"]')[i]);
                                    var prefix = $(legend).attr('data-legend-prefix');
                                    var suffix = $(legend).attr('data-legend-suffix');
                                    var label = tooltip.labels[i].substring(0, tooltip.labels[i].lastIndexOf(': ')) + ': ';
                                    var value = tooltip.labels[i].substring(tooltip.labels[i].lastIndexOf(':') + 2, tooltip.labels[i].length + 1);
                                    var tooltip_formatted = label + prefix + value + suffix + ((show_percentage && total != 0) ? (' (' + (new Number(parseFloat(value) * 100 / total)).toFixed(2) + '% {{'of' | trans({},'TechPromuxDynamicReportBundle')}} '+(total==parseInt(total)?total:total.toFixed(2))+')') : '');
                                    innerHtml += [
                                        '<div class="chartjs-tooltip-section">',
                                        '	<span class="chartjs-tooltip-key" style="background-color:' + tooltip.legendColors[i].fill + '"></span>',
                                        '	<span class="chartjs-tooltip-value">' + tooltip_formatted + '</span>',
                                        '</div>'
                                    ].join('');
                                }
                            }
                            else
                            {
                                var legend = $($('#component-chart-{{chart_type}}-legend-top-{{component.id}} ul.{{chart_legend_type}} li[data-legend-show="true"]')[0]);
                                var prefix = $(legend).attr('data-legend-prefix');
                                var suffix = $(legend).attr('data-legend-suffix');
                                var label = tooltip.text.substring(0, tooltip.text.lastIndexOf(': ')) + ': ' + prefix + tooltip.text.substring(tooltip.text.lastIndexOf(':') + 2, tooltip.text.length + 1) + suffix;
                                innerHtml += [
                                    '<div class="chartjs-tooltip-section">',
                                    '	<span class="chartjs-tooltip-value">' + label + '</span>',
                                    '</div>'
                                ].join('');
                            }
                            tooltipEl.html(innerHtml);
                            tooltipEl.css({
                                opacity: 1,
                                left: tooltip.chart.canvas.offsetLeft + tooltip.x + 'px',
                                top: tooltip.chart.canvas.offsetTop + tooltip.y + 'px',
                                fontFamily: tooltip.fontFamily,
                                fontSize: tooltip.fontSize,
                                fontStyle: tooltip.fontStyle,
                            });
                        },
                        //  ----- Bar Chart Options ----------------
                        /**/{%if (chart_type == 'Bar')%}
                        // Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
                        scaleBeginAtZero: true,
                        //Boolean - Whether grid lines are shown across the chart
                        scaleShowGridLines: true,
                        //String - Colour of the grid lines
                        scaleGridLineColor: "rgba(0,0,0,.05)",
                        //Number - Width of the grid lines
                        scaleGridLineWidth: 1,
                        //Boolean - Whether to show horizontal lines (except X axis)
                        scaleShowHorizontalLines: true,
                        //Boolean - Whether to show vertical lines (except Y axis)
                        scaleShowVerticalLines: true,
                        //Boolean - If there is a stroke on each bar
                        barShowStroke: true,
                        //Number - Pixel width of the bar stroke
                        barStrokeWidth: 2,
                        //Number - Spacing between each of the X value sets
                        barValueSpacing: 5,
                        //Number - Spacing between data sets within X values
                        barDatasetSpacing: 1,
                        //String - A legend template
                        legendTemplate: {% raw %}"<ul class=\"<%=name.toLowerCase()%>-legend list-unstyled nav navbar-top-links\"><% for (var i=0; i<datasets.length; i++){%><li style=\"margin:5px;cursor:pointer;opacity:1;\"><span style=\"background-color:<%=datasets[i].fillColor%>;padding:0px 5px 0px 10px\"></span><span style=\"padding-left:7px;\"><strong><%if(datasets[i].label){%><%=datasets[i].label%><%}%></strong></span></li><%}%></ul>",{% endraw %}
                        /**/{% elseif (chart_type == 'StackedBar')%}
                        //  ----- StackedBar Chart Options ----------------
                        //Boolean - Whether bars should be rendered on a percentage base
                        relativeBars: {% if (settings['chart_options']['chart_type'] == "StackedBar" and settings['chart_options']['stacked_chart_bar_presentation'] == "relative_bar")%}true{%else%}false{%endif%},
                        //Boolean - Hide labels with value set to 0
                        tooltipHideZero: false,
                        // Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
                        scaleBeginAtZero: true,
                                //Boolean - Whether grid lines are shown across the chart
                                scaleShowGridLines : true,
                                //String - Colour of the grid lines
                                scaleGridLineColor : "rgba(0,0,0,.05)",
                                //Number - Width of the grid lines
                                scaleGridLineWidth : 1,
                                //Boolean - If there is a stroke on each bar
                                barShowStroke : true,
                                //Number - Pixel width of the bar stroke
                                barStrokeWidth : 2,
                                //Number - Spacing between each of the X value sets
                                barValueSpacing : 5,
                                //String - A legend template
                                legendTemplate: {% raw %}"<ul class=\"<%=name.toLowerCase()%>-legend list-unstyled nav navbar-top-links\"><% for (var i=0; i<datasets.length; i++){%><li style=\"margin:5px;cursor:pointer;opacity:1;\"><span style=\"background-color:<%=datasets[i].fillColor%>;padding:0px 5px 0px 10px\"></span><span style=\"padding-left:7px;\"><strong><%if(datasets[i].label){%><%=datasets[i].label%><%}%></strong></span></li><%}%></ul>",{% endraw %}
                                /**/{% endif%}
                    };
            $('#component-panel-content-{{component.id}}').trigger('data-loaded');
        });

    </script>
{% endblock component_javascripts_render_chart_data %}