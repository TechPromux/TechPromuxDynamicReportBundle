<?php

namespace TechPromux\Bundle\DynamicReportBundle\Manager;

use TechPromux\Bundle\BaseBundle\Manager\Resource\BaseResourceManager;
use TechPromux\Bundle\DynamicQueryBundle\Manager\DataModelManager;
use TechPromux\Bundle\DynamicReportBundle\Entity\Component;
use TechPromux\Bundle\DynamicReportBundle\Type\Component\BaseComponentType;

/**
 * ComponentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ComponentManager extends BaseResourceManager
{
    /**
     *
     * @return string
     */
    public function getBundleName()
    {
        return 'TechPromuxDynamicReportBundle';
    }

    /**
     * Get entity class name
     *
     * @return class
     */
    public function getResourceClass()
    {
        return Component::class;
    }

    /**
     * Get entity short name
     *
     * @return string
     */
    public function getResourceName()
    {
        return 'Component';
    }

    //----------------------------------------------------


    private $report_manager;

    /**
     *
     * @param ReportManager $report_manager
     * @return ComponentManager
     */
    public function setReportManager(ReportManager $report_manager)
    {
        $this->report_manager = $report_manager;
        return $this;
    }

    /**
     *
     * @return ReportManager
     */
    public function getReportManager()
    {
        return $this->report_manager;
    }


    //-----------------------------------------------------------------------------------------------

    /**
     * @var DataModelManager
     */
    protected $datamodel_manager;

    /**
     * @return DataModelManager
     */
    public function getDatamodelManager()
    {
        return $this->datamodel_manager;
    }

    /**
     * @param DataModelManager $datamodel_manager
     * @return DataModelDetailManager
     */
    public function setDatamodelManager($datamodel_manager)
    {
        $this->datamodel_manager = $datamodel_manager;
        return $this;
    }

    //------------------------------------------------------------------------------

    /**
     * @var UtilDynamicReportManager
     */
    protected $util_dynamic_report_manager;

    /**
     * @return UtilDynamicReportManager
     */
    public function getUtilDynamicReportManager()
    {
        return $this->util_dynamic_report_manager;
    }

    /**
     * @param UtilDynamicReportManager $util_dynamic_report_manager
     * @return ComponentManager
     */
    public function setUtilDynamicReportManager($util_dynamic_report_manager)
    {
        $this->util_dynamic_report_manager = $util_dynamic_report_manager;
        return $this;
    }

    //-------------------------------------------------------------

    public function duplicateComponent(\TechPromux\Bundle\DynamicReportBundle\Entity\Component $object)
    {

        $component = $this->findById($object->getId());
        /* @var $component \TechPromux\Bundle\DynamicReportBundle\Entity\Component */

        $duplicatedComponent = $this->createNewEntity();

        $duplicatedComponent->setReport($component->getReport());
        $duplicatedComponent->setQuery($component->getQuery());

        $duplicatedComponent->setTitle($component->getTitle() . ' (' . $this->trans('Duplicated') . ')');
        $duplicatedComponent->setSettings($component->getSettings());
        $duplicatedComponent->setType($component->getType());
        $duplicatedComponent->setTemplateContainer($component->getTemplateContainer());
        $duplicatedComponent->setPosition($component->getPosition());
        $duplicatedComponent->setEnabled(false);

        $this->prePersist($duplicatedComponent);
        $this->getDoctrineEntityManager()->persist($duplicatedComponent);
        $this->getDoctrineEntityManager()->flush($duplicatedComponent);

        return $duplicatedComponent;
    }

    //----------------------------------------------------------------------

    /**
     * @param Component $object
     */
    public function prePersist($object)
    {
        parent::prePersist($object);

        //$object->setName($object->getTitle());

        //$component_type_name = $object->getComponentType();

        //$component_type = $this->getUtilDynamicReportManager()->getComponentTypeById($component_type_name);

        /* @var $component_type BaseComponentType */
        //$object->setOptionsCustom($component_type->getDefaultCustomSettings());

    }

    public function preUpdate($object)
    {
        parent::preUpdate($object);

        //$object->setName($object->getTitle());

        //$component_type_name = $object->getComponentType();

        //$component_type = $this->getUtilDynamicReportManager()->getComponentTypeById($component_type_name);

        /* @var $component_type BaseComponentType */
        //$object->setOptions($component_type->getDefaultCustomSettings());

        //$component_type->preUpdate($object);

    }

    public function preRemove($object)
    {

    }

    public function postPersist($object)
    {

    }

    public function postUpdate($object)
    {

    }

    public function postRemove($object)
    {

    }

    //-------------------------------------------------------------------------

    /**
     * @param Component $component
     *
     * @return array
     */
    public function getDataModelDetailsChoices(Component $component)
    {
        $component_type_name = $component->getComponentType();

        $component_type = $this->getUtilDynamicReportManager()->getComponentTypeById($component_type_name);
        /* @var $component_type BaseComponentType */

        if ($component_type->getHasDataModelDataset()) {
            $datamodel_id = $component->getDatamodel()->getId();

            $details = $this->getDatamodelManager()->getEnabledDetailsDescriptionsFromDataModel($datamodel_id);

            $details_for_labels_choices = array();
            $details_for_data_choices = array();
            $details_for_series_choices = array();

            foreach ($details as $dt) {

                $details_for_labels_choices[$dt['title'] . ' (' . $dt['abbreviation'] . ')'] = $dt['id'];
                $details_for_series_choices[$dt['title'] . ' (' . $dt['abbreviation'] . ')'] = $dt['id'];

                switch ($component_type->getDataModelDatasetWithDataDetailsType()) {
                    case 'number':
                        if ($dt['classification'] == 'number')
                            $details_for_data_choices[$dt['title'] . ' (' . $dt['abbreviation'] . ')'] = $dt['id'];
                        break;
                    case 'datetime':
                        if ($dt['classification'] == 'datetime')
                            $details_for_data_choices[$dt['title'] . ' (' . $dt['abbreviation'] . ')'] = $dt['id'];
                        break;
                    case 'number_datetime':
                        if ($dt['classification'] == 'number' || $dt['classification'] == 'datetime')
                            $details_for_data_choices[$dt['title'] . ' (' . $dt['abbreviation'] . ')'] = $dt['id'];
                        break;
                    case 'all':
                        $details_for_data_choices[$dt['title'] . ' (' . $dt['abbreviation'] . ')'] = $dt['id'];
                        break;
                    default:
                        $details_for_data_choices[$dt['title'] . ' (' . $dt['abbreviation'] . ')'] = $dt['id'];
                        break;
                }
            }

            return array(
                'details' => $details,
                'details_for_labels_choices' => $details_for_labels_choices,
                'details_for_data_choices' => $details_for_data_choices,
                'details_for_series_choices' => $details_for_series_choices,
            );
        }
        return array();
    }



    //-------------------------------------------------------------------------


}
