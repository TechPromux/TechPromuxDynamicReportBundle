{% extends 'TechPromuxDynamicReportBundle:Component:Chart/component.render.base.chart.html.twig' %}
{% set chart_type = settings['chart_options']['chart_type'] %}
{% set chart_legend_type = (chart_type| lower)~'-legend' %}

{% block component_javascripts_render_chart_legend %}
    <script>
        // function for rendering custom chart

        function tpx_component_chart_{{chart_type}}_render_custom_chartjs_legend_{{component.id | replace({'-':'_'}) }}(update_legend = false) {

        console.log('TPX-Component-Chart-{{chart_type}}: creating chart legend');
                // creating chart legend
                if (update_legend == false)
                return;
                console.log('TPX-Component-Chart-{{chart_type}}: obtaining chart legend');
                var legend_{{component.id | replace({'-':'_'}) }} = '<ul class="{{chart_legend_type}} list-unstyled nav navbar-top-links">';
                // crear aqui la legenda
                for (var x = 0; x < window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}.length; x++)
        {
        legend_{{component.id | replace({'-':'_'}) }} += '<li style="margin:5px; opacity: 1; cursor: pointer;">';
                legend_{{component.id | replace({'-':'_'}) }} += '<span class="{{chart_legend_type}}-icon" style="padding:0px 5px 0px 10px;background-color:' + window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}[x].color + '"></span>';
                legend_{{component.id | replace({'-':'_'}) }} += '<span class="{{chart_legend_type}}-text" style="padding-left:7px;">' + window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}[x].label + ' ' + '({{settings['detail_for_data']['show_prefix'] ? extras.datamodel_details_descriptions[settings['detail_for_data']['detail_id']]['prefix'] : ''}}' + window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }}[x].value + '{{settings['detail_for_data']['show_suffix'] ? extras.datamodel_details_descriptions[settings['detail_for_data']['detail_id']]['suffix'] : ''}})' + '</span>';
        }
        legend_{{component.id | replace({'-':'_'}) }} += '</ul>';
                console.log('TPX-Component-Chart-{{chart_type}}: showing chart legend');
                $('#component-chart-{{chart_type}}-legend-top-{{component.id}}').html('');
                $('#component-chart-{{chart_type}}-legend-top-{{component.id}}').append(legend_{{component.id | replace({'-':'_'}) }});
                $('#component-chart-{{chart_type}}-legend-bottom-{{component.id}} ul').html('');
                /**/$('#component-chart-{{chart_type}}-legend-top-{{component.id}} ul.{{chart_legend_type}} li').each(function (id, el) {
        $(this).attr('data-legend-offset', id);
                $(this).attr('data-legend-show', "true");
                $(this).attr('data-legend-prefix', "{{settings['detail_for_data']['show_prefix'] ? extras.datamodel_details_descriptions[settings['detail_for_data']['detail_id']]['prefix'] : ''}}");
                $(this).attr('data-legend-suffix', "{{settings['detail_for_data']['show_suffix'] ? extras.datamodel_details_descriptions[settings['detail_for_data']['detail_id']]['suffix'] : ''}}");
        });
                console.log('TPX-Component-Chart-{{chart_type}}: ending rendering legend');
        }
    </script>
{% endblock component_javascripts_render_chart_legend %}

{% block component_javascripts_configure_legend %}
    <script>
        // configure legend options from chart
        $(document).on('click', '#tpx-component-chart-{{chart_type}}-legend-top-{{component.id}} ul.{{chart_legend_type}} li', function () {
        console.log('TPX-Component-Chart-{{chart_type}}: click on chart legend to hide or show it');
                var show = $(this).attr('data-legend-show');
                if (show == "true")
                $(this).css({
        opacity: 0.3,
                cursor: 'not-allowed'
        });
                else
                $(this).css({
        opacity: 1,
                cursor: 'pointer'
        });
                $(this).attr('data-legend-show', show == "true" ? "false" : "true");
                var default_datasets = window.tpx_component_chart_{{chart_type}}_data_default_{{component.id | replace({'-':'_'}) }};
                var new_datasets = [];
                var new_labels = [];
                var pos = 0;
                var legends = $('#component-chart-{{chart_type}}-legend-top-{{component.id}} ul.{{chart_legend_type}} li');
                for (var i = 0; i < legends.length; i++)
        {
        if ($(legends[i]).attr('data-legend-show') == "true")
        {
        new_datasets[pos] = {
        label: default_datasets[i].label,
                value: default_datasets[i].value,
                color: default_datasets[i].color,
                highlight: default_datasets[i].highlight,
        };
                pos++;
        }
        }
        window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }} = new_datasets;
                tpx_component_chart_{{chart_type}}_render_custom_chartjs_{{component.id | replace({'-':'_'}) }}(false);
        }); /**/

    </script>
{% endblock component_javascripts_configure_legend %}

{% block component_javascripts_render_chart_data %}

    {{parent()}}
    <script>

                // initial options and executing rendering chart

                $(document).ready(function () {

        window.tpx_component_chart_{{chart_type}}_data_default_{{component.id | replace({'-':'_'}) }} = {{chart_data | raw}};
                window.tpx_component_chart_{{chart_type}}_data_current_{{component.id | replace({'-':'_'}) }} = {{chart_data|raw}};
                window.tpx_component_chart_{{chart_type}}_custom_chartjs_options_{{component.id | replace({'-':'_'}) }} = {
                // Boolean - Whether to animate the chart
                animation: true,
                        // Boolean - If we should show the scale at all
                        showScale: true,
                        // Boolean - If we want to override with a hard coded scale
                        scaleOverride: false,
                        // ** Required if scaleOverride is true **
                        // Number - The number of steps in a hard coded scale
                        scaleSteps: null,
                        // Number - The value jump in the hard coded scale
                        scaleStepWidth: null,
                        // Number - The scale starting value
                        scaleStartValue: null,
                        // String - Colour of the scale line
                        scaleLineColor: "rgba(0,0,0,.1)",
                        // Number - Pixel width of the scale line
                        scaleLineWidth: 1,
                        // Boolean - Whether to show labels on the scale
                        scaleShowLabels: true,
                        // Interpolated JS string - can access value
                        scaleLabel: "<%=value%>",
                        // Boolean - Whether the scale should stick to integers, not floats even if drawing space is there
                        scaleIntegersOnly: true,
                        // String - Scale label font declaration for the scale label
                        scaleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                        // Number - Scale label font size in pixels
                        scaleFontSize: 12,
                        // String - Scale label font weight style
                        scaleFontStyle: "normal",
                        // String - Scale label font colour
                        scaleFontColor: "#666",
                        // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
                        maintainAspectRatio: true,
                        // Boolean - Determines whether to draw tooltips on the canvas or not
                        showTooltips: true,
                        // Array - Array of string names to attach tooltip events
                        tooltipEvents: ["mousemove", "touchstart", "touchmove"],
                        // String - Tooltip background colour
                        tooltipFillColor: "rgba(0,0,0,0.8)",
                        // String - Tooltip label font declaration for the scale label
                        tooltipFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                        // Number - Tooltip label font size in pixels
                        tooltipFontSize: 14,
                        // String - Tooltip font weight style
                        tooltipFontStyle: "normal",
                        // String - Tooltip label font colour
                        tooltipFontColor: "#fff",
                        // String - Tooltip title font declaration for the scale label
                        tooltipTitleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                        // Number - Tooltip title font size in pixels
                        tooltipTitleFontSize: 14,
                        // String - Tooltip title font weight style
                        tooltipTitleFontStyle: "bold",
                        // String - Tooltip title font colour
                        tooltipTitleFontColor: "#fff",
                        // String - Tooltip title template
                        //tooltipTitleTemplate: "<%= label%>",
                        // Number - pixel width of padding around tooltip text
                        tooltipYPadding: 6,
                        // Number - pixel width of padding around tooltip text
                        tooltipXPadding: 6,
                        // Number - Size of the caret on the tooltip
                        tooltipCaretSize: 8,
                        // Number - Pixel radius of the tooltip border
                        tooltipCornerRadius: 6,
                        // Number - Pixel offset from point x to tooltip edge
                        tooltipXOffset: 10,
                        // String - Template string for single tooltips
                        tooltipTemplate: {% raw %}"<%if (label){%><%=label%>: <%}%><%= value %>",{% endraw %}
                        // String - Template string for multiple tooltips
                        //multiTooltipTemplate: "<%= value %>",
                        // FieldFunction - Will fire on animation progression.
                        onAnimationProgress: function () {
                        },
                        // FieldFunction - Will fire on animation completion.
                        onAnimationComplete: function () {
                        },
                        // Boolean - whether or not the chart should be responsive and resize when the browser does.
                        responsive: {% if (settings['chart_options']['width'] is defined and settings['chart_options']['width']!='')%}false{%else%}true{%endif%},
                        // FieldFunction - Determines whether to execute the customTooltips function instead of drawing the built in tooltips (See [Advanced - External Tooltips](#advanced-usage-external-tooltips))
                        customTooltips: function (tooltip)
                        {
                        var tooltipEl = $('#component-chart-{{chart_type}}-tooltip-{{component.id}}');
                                if (!tooltip)
                        {
                        tooltipEl.css({opacity: 0});
                                return;
                        }
                        tooltipEl.css({padding: '5px'});
                                tooltipEl.removeClass('above below');
                                tooltipEl.addClass(tooltip.yAlign);
                                var innerHtml = '';
                                if ($('#component-chart-{{chart_type}}-legend-top-{{component.id}} ul li[data-legend-show="true"]').length == 0)
                                return;
                                var show_percentage = true;
                                var total = 0;
                                if (show_percentage)
                        {
                        for (var i = 0; i < $('#component-chart-{{chart_type}}-legend-top-{{component.id}} ul li[data-legend-show="true"]').length /*tooltip.labels.length*/; i++)
                        {
                        var pos = $($('#component-chart-{{chart_type}}-legend-top-{{component.id}} ul li[data-legend-show="true"]')[i]).attr('data-legend-offset');
                                total += parseFloat((window.tpx_component_chart_{{chart_type}}_data_default_{{component.id | replace({'-':'_'}) }}[pos]).value);
                        }
                        }
                        var legend = $($('#component-chart-{{chart_type}}-legend-top-{{component.id}} ul.{{chart_legend_type}} li[data-legend-show="true"]')[0]);
                                var prefix = $(legend).attr('data-legend-prefix');
                                var suffix = $(legend).attr('data-legend-suffix');
                                var label = tooltip.text.substring(0, tooltip.text.lastIndexOf(': ')) + ': ';
                                var value = tooltip.text.substring(tooltip.text.lastIndexOf(':') + 2, tooltip.text.length + 1);
                                var tooltip_formatted = label + prefix + value + suffix + ((show_percentage && total != 0) ? (' (' + (new Number(parseFloat(value) * 100 / total)).toFixed(2) + '% {{'of' | trans({},'TechPromuxDynamicReportBundle')}} ' + (total==parseInt(total)?total:total.toFixed(2)) + ')') : '');
                                innerHtml += [
                                        '<div class="chartjs-tooltip-section">',
                                        '	<span class="chartjs-tooltip-value">' + tooltip_formatted + '</span>',
                                        '</div>'
                                ].join('');
                                tooltipEl.html(innerHtml);
                                tooltipEl.css({
                                opacity: 1,
                                        left: tooltip.chart.canvas.offsetLeft + tooltip.x + 'px',
                                        top: tooltip.chart.canvas.offsetTop + tooltip.y + 'px',
                                        fontFamily: tooltip.fontFamily,
                                        fontSize: tooltip.fontSize,
                                        fontStyle: tooltip.fontStyle,
                                });
                        },
                        //  ----- Pie Chart Options ----------------
                        /**/{%if (chart_type == 'Pie')%}
                        //Boolean - Whether we should show a stroke on each segment
                        segmentShowStroke: true,
                        //String - The colour of each segment stroke
                        segmentStrokeColor: "#fff",
                        //Number - The width of each segment stroke
                        segmentStrokeWidth: 2,
                        //Number - The percentage of the chart that we cut out of the middle
                        percentageInnerCutout: 0, // This is 0 for Pie charts

                        //Number - Amount of animation steps
                        animationSteps: 100,
                        //String - Animation easing effect
                        animationEasing: "easeOutBounce",
                        //Boolean - Whether we animate the rotation of the Doughnut
                        animateRotate: false,
                        //Boolean - Whether we animate scaling the Doughnut from the centre
                        animateScale: true,
                        //  ----- Dougnut Chart Options ----------------
                        /**/{% elseif (chart_type == 'Dougnut')%}
                        //Boolean - Whether we should show a stroke on each segment
                        segmentShowStroke: true,
                        //String - The colour of each segment stroke
                        segmentStrokeColor: "#fff",
                        //Number - The width of each segment stroke
                        segmentStrokeWidth: 2,
                        //Number - The percentage of the chart that we cut out of the middle
                        percentageInnerCutout: 50, // This is 0 for Pie charts

                        //Number - Amount of animation steps
                        animationSteps: 100,
                        //String - Animation easing effect
                        animationEasing: "easeOutBounce",
                        //Boolean - Whether we animate the rotation of the Doughnut
                        animateRotate: true,
                        //Boolean - Whether we animate scaling the Doughnut from the centre
                        animateScale: true,
                        /**/{% elseif (chart_type == 'PolarArea')%}
                        //  ----- Polar Area Chart Options ----------------
                        //Boolean - Show a backdrop to the scale label
                        scaleShowLabelBackdrop: true,
                        //String - The colour of the label backdrop
                        scaleBackdropColor: "rgba(255,255,255,0.75)",
                        // Boolean - Whether the scale should begin at zero
                        scaleBeginAtZero: true,
                        //Number - The backdrop padding above & below the label in pixels
                        scaleBackdropPaddingY: 2,
                        //Number - The backdrop padding to the side of the label in pixels
                        scaleBackdropPaddingX: 2,
                        //Boolean - Show line for each value in the scale
                        scaleShowLine: true,
                        //Boolean - Stroke a line around each segment in the chart
                        segmentShowStroke : true,
                        //String - The colour of the stroke on each segment.
                        segmentStrokeColor : "#fff",
                        //Number - The width of the stroke value in pixels
                        segmentStrokeWidth : 2,
                        //Number - Amount of animation steps
                        animationSteps : 100,
                        //String - Animation easing effect.
                        animationEasing : "easeOutBounce",
                        //Boolean - Whether to animate the rotation of the chart
                        animateRotate : true,
                        //Boolean - Whether to animate scaling the chart from the centre
                        animateScale : false,
        {%endif%}       
                };
                $('#component-panel-content-{{component.id}}').trigger('data-loaded');
        });
                //
        </script>
        {% endblock component_javascripts_render_chart_data %}


